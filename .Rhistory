-(1-u_alpha[i,1])*G*log(Gamma1)-(1-u_alpha[i,2])*G*log(Gamma1)
+(1-u_uk[1])*(u_alpha[i,1]*log(Gamma2)+(1-u_alpha[i,1])*log(1-Gamma2))
+(1-u_uk[2])*(u_alpha[i,2]*log(Gamma2)+(1-u_alpha[i,2])*log(1-Gamma2))
-b_phi[i]*u_phi[i]
for(j in 1:samplenumber[i]){
ELBO=ELBO+u_pi[[i]][j]*log(beta(a_pi+1,b_pi))-log(u_pi[[i]][j]^(u_pi[[i]][j]))+(1-u_pi[[i]][j])*log(beta(a_pi,b_pi+1))-log((1-u_pi[[i]][j])^(1-u_pi[[i]][j]))
}
##second part
ELBO=ELBO+sum(-u_log_g[[i]]+lgamma(g2)
-g2*log((1-u_pi[[i]])*(u_phi[i]*theta1+1)))
+c1*u_phi[i]+safe_log_compu_phi(s=N_pi,t=c1,ap=a_phi[i])+0.5*log(det(sigma_theta[[i]]))
for(k in 1:2){
if(k==1){
e_betak=sum(u_theta[2:(G+1),i]^2)+sum(unname(diag(sigma_theta[[i]])[2:(G+1)]))
}else{
e_betak=sum(u_theta[(G+2):(2*G+1),i]^2)+sum(unname(diag(sigma_theta[[i]])[(G+2):(2*G+1)]))
}
ELBO=ELBO-(u_alpha[i,k]*G+1)/2*log(u_abetaT[i,k]+u_alpha[i,k]*e_betak/2)+lgamma((u_alpha[i,k]*G+1)/2)
+(u_alpha[i,k]*e_betak/2+u_abetaT[i,k])*u_sigmaT_beta[i,k]
-log(u_sigmaT_beta[i,k]+1/A_k[k]^2)
-log(u_alpha[i,k]^(u_alpha[i,k]))-log((1-u_alpha[i,k])^((1-u_alpha[i,k])))
}
}
ELBO=ELBO-log(u_uk[1]^u_uk[1])-log((1-u_uk[1])^((1-u_uk[1])))-log(u_uk[2]^u_uk[2])-log((1-u_uk[2])^((1-u_uk[2])))+
log(beta(u_uk[1]*sum(u_alpha[,1])+c_q,u_uk[1]*(M-sum(u_alpha[,1]))+d_q))+log(beta(u_uk[1]+c_p,d_p-u_uk[1]+1))+
log(beta(u_uk[2]*sum(u_alpha[,2])+c_q,u_uk[2]*(M-sum(u_alpha[,2]))+d_q))+log(beta(u_uk[2]+c_p,d_p-u_uk[2]+1))
signo=abs(ELBO-ELBO_OLD)
ELBO_OLD=ELBO
if (all(abs(u_uk - u_uk_old) < 1e-9)) {
stability_counter <- stability_counter + 1
} else {
stability_counter <- 0
}
# updata u_uk
u_uk_old <- u_uk
if (stability_counter > 8 && signo < 1) {
break
}
num=num+1
if(num>200){
break
}
print(paste0(num," u1: ",u_uk[1],"u2:",u_uk[2]," error: ",round(signo,4)))
}
return(u_uk)
}
##choose the basic fuction degree
tun_spl <- function(spe.list,calpha.list,g=1){
##test length
n1=length(spe.list)
n2=length(calpha.list)
if(n1==n2){
}else{
print("warning!the length of expression matrix do not match the calpha's")
}
tunning_choose=rep(1,n1)
for(iii in c(1:n1)){
aic_value <- c(1:4)
y = unname(spe.list[[iii]][[1]][, g])
# compute the proportion
zero_count <- sum(y == 0)
samplenum=length(y)
print(zero_count)
total_count <- length(y)
zero_ratio <- zero_count / total_count
zero_ratio
if (zero_ratio > 0.9) {
min_position <- 1
}else if(zero_ratio <0.7 && samplenum > 500 ){
#model with zeroinfl
for (kkk in c(1:4)){
splinelevel = kkk
degreelevel = kkk
coord_spline1 <- bs(x = spe.list[[iii]][[2]][, 1], df = splinelevel, degree = degreelevel)
coord_spline2 <- bs(x = spe.list[[iii]][[2]][, 2], df = splinelevel, degree = degreelevel)
x <- cbind(coord_spline1, coord_spline2)
rows_with_sum_1 <- rowSums(calpha.list[[iii]]) == 1
calpha.list[[iii]][rows_with_sum_1, 1] <- calpha.list[[iii]][rows_with_sum_1, 1] - 0.01
calpha.list[[iii]][calpha.list[[iii]] < 0] <- 0
data <- data.frame(x = x, calpha = calpha.list[[iii]], y = y)
x_names = paste0("x", c(1:(2 * splinelevel)))
celltypenum = dim(calpha.list[[iii]])[2]
calpha_names = paste0("calpha", c(1:celltypenum))
data_name = c(x_names, calpha_names, "y")
names(data) = data_name
formula_str <- paste(data_name[1:(2*splinelevel+celltypenum)], collapse = " + ")
formula_count <- paste("y ~", formula_str)
formula_zero <- paste("|", formula_str)
formula_full <- as.formula(paste(formula_count, formula_zero))
model_zinb <- zeroinfl(formula_full, data = data, dist = "negbin")
summary(model_zinb)
aic_value[kkk] <- AIC(model_zinb)
}
min_position <- which.min(aic_value)
}else{
#model with hurdle
for (kkk in c(1:4)) {
splinelevel = kkk
degreelevel = kkk
coord_spline1 <- bs(x = spe.list[[iii]][[2]][, 1], df = splinelevel, degree = degreelevel)
coord_spline2 <- bs(x = spe.list[[iii]][[2]][, 2], df = splinelevel, degree = degreelevel)
x <- cbind(coord_spline1, coord_spline2)
rows_with_sum_1 <- rowSums(calpha.list[[iii]]) == 1
calpha.list[[iii]][rows_with_sum_1, 1] <- calpha.list[[iii]][rows_with_sum_1, 1] - 0.01
calpha.list[[iii]][calpha.list[[iii]] < 0] <- 0
data <- data.frame(x = x, calpha = calpha.list[[iii]], y = y)
x_names = paste0("x", c(1:(2 * splinelevel)))
celltypenum = dim(calpha.list[[iii]])[2]
calpha_names = paste0("calpha", c(1:celltypenum))
data_name = c(x_names, calpha_names, "y")
names(data) = data_name
formula_str <- paste(data_name[1:(2*splinelevel+celltypenum)], collapse = " + ")
formula_count <- paste("y ~", formula_str)
formula_zero <- paste("|", formula_str)
formula_full <- as.formula(paste(formula_count, formula_zero))
model_zinb <- hurdle(formula_full, data = data, dist = "negbin")
summary(model_zinb)
aic_value[kkk] <- AIC(model_zinb)
}
min_position <- which.min(aic_value)
}
tunning_choose[iii]=min_position
}
tunning_final=max(tunning_choose)
print(paste0("Choosing b-spline degree: ",tunning_final))
return(tunning_final)
}
#data preprocess
CTIG<-function(spe.list){
#obtain the number of datasets
m=length(spe.list)
Y.list<-list()
coord.list<-list()
samplenumber<-c()
for(i in 1:m){
Y.list[[i]]<-spe.list[[i]][[1]]#spot*gene
samplenumber[i]<-nrow(Y.list[[i]])## get sample number of each datasets
coord<-spe.list[[i]][[2]]
coord <-coord-colMeans(coord)#Centercoordinates of spots
coord <- coord / apply(coord,2,sd)# normalize coordinates of spots
coord.list[[i]]<-coord
}
## gene numbers
G <- ncol(Y.list[[1]])
##spline transform to coord.list for 1:4
co_spline_list_list <- list()
for(j in c(1:4)){
co_spline_list <- list()
for(i in 1:m){
coord_spline1 <- bs(x=coord.list[[i]][,1],df = j,degree=j)
coord_spline2 <- bs(x = coord.list[[i]][,2],df = j,degree=j)
co_spline_list[[i]] <- cbind(coord_spline1, coord_spline2)
}
co_spline_list_list[[j]] <- co_spline_list
}
result <- list(Y.list,co_spline_list_list,samplenumber,G)
return(result)
}
#single gene process
citgtest <- function(g,result,c_alpha,spe.list){
Ysingle.list<-list()
for(i in 1:length(result[[3]])){
Ysingle.list[[i]]<-as.vector(result[[1]][[i]][,g])
}
begin <- Sys.time()
#obtain the b-spline level
tun_choose <- tun_spl(spe.list = spe.list,calpha.list = c_alpha,g=g)
if(tun_choose==1){
ak1=0.08
}else if(tun_choose==2){
ak1=0.05
}else if(tun_choose==3){
ak1=0.04
}else{
ak1=0.03
}
knum1=dim(c_alpha[[1]])[2]
bbb <- VIZINB(Ysingle.list,result[[2]][[tun_choose]],result[[3]],tun_choose,acrate=0.01,ak=ak1,dp=1.8,cp=0.2,c_alpha=c_alpha,knum=knum1)
end <- Sys.time()
print(paste0("the",g,"gene use the time:",end-begin))
return(bbb)
}
#data Detection
validate_data_consistency_strict <- function(spe.list, c_alpha) {
# 1. Gene name Detection
ref_genes <- colnames(spe.list[[1]][[1]])  # Taking the first dataset as reference
for (m in seq_along(spe.list)) {
current_genes <- colnames(spe.list[[m]][[1]])
if (!identical(current_genes, ref_genes)) {
stop(sprintf(
"[Gene name Detection] dataset ",m," : number or order of genes does not match.Stop!"
))
}
}
#2. Coveriate name Detection
if (length(c_alpha) > 0) {
ref_calpha_cols <- colnames(c_alpha[[1]])#Taking the first dataset as reference
for (m in seq_along(c_alpha)) {
current_cols <- colnames(c_alpha[[m]])
if (!identical(current_cols, ref_calpha_cols)) {
stop(sprintf(
"[Coveriate name Detection] dataset ",m," : number or order of coveriates does not match.Stop!"
))
}
}
}
#3. spot name consistency Detection
for (m in seq_along(spe.list)) {
spots_expr <- rownames(spe.list[[m]][[1]])
spots_coord <- rownames(spe.list[[m]][[2]])
spots_calpha <- rownames(c_alpha[[m]])
if (any(sapply(list(spots_expr, spots_coord, spots_calpha), is.null))) {
stop(sprintf(
"[Spot name consistency Detection] One dataset is missing spot name.Stop!"
))
}
# spot name consistency Detection
if (!identical(spots_expr, spots_coord) || !identical(spots_expr, spots_calpha)) {
stop(sprintf(
"[Spot name consistency Detection] Number or order of spots does not match.Stop!"
))
}
}
return(TRUE)
}
#function to compute complex function
f <- function(x, p, q, r, s, t,h=0) {
result <- ((log(1+r*x))^q)*exp(p*log(x)+s*x*log(x)-s*lgamma(x)-t*x)
return(result)
}
#function of Numerical integration
gausslq <- function(n=100,p,q,r,s,t,h=0){
out <- gauss.quad.prob(n,"gamma",alpha =1,beta = 1 )
return(sum(f(out[[1]],p,q,r,s,t,h)*out[[2]]))
}
#function of Numerical integration
compu_phi <- function(n=200,s,t,ap){
h=0
result=0
while(is.nan(result)||result==0||result==Inf||result==-Inf){
result <- gausslq(n,p=ap,q=0,r=1,s=s,t=t-1,h)/gausslq(n,p=ap-1,q=0,r=1,s=s,t=t-1,h)
h=h+100
}
return(result)
}
compu_phi <- function(n = 200, s, t, ap, max_attempts = 10) {
h <- 0
result <- NA
attempt <- 1
while(attempt <= max_attempts &&
(is.na(result) || !is.finite(result) || result == 0)) {
result <- tryCatch({
int1 <- gausslq(n, p = ap, q = 0, r = 1, s = s, t = t - 1, h = h)
int2 <- gausslq(n, p = ap - 1, q = 0, r = 1, s = s, t = t - 1, h = h)
if(is.nan(int2) || int2 == 0) {
NA
} else {
int1 / int2
}
}, error = function(e) NA)
h <- h + 100
attempt <- attempt + 1
}
if(is.na(result) || !is.finite(result)) {
return(1)  # 返回默认值
} else {
return(result)
}
}
#function of Numerical integration
safe_compu_phi <- function(n=200,s,t,ap,timeout=0.05,old=1){
result <- old
tryCatch(
{result <- withTimeout(compu_phi(n=200,s=s,t=t,ap=ap),timeout = timeout)},
TimeoutException = function(ex){result <- old}
)
return(result)
}
#function of Numerical integration
log_compu_phi <- function(s,t,ap){
j=0
result=0
h=0
while(is.nan(result) ||result==0||result==Inf||result==-Inf){
result <- log(gausslq(n=100, p=ap-1, q=0, r=1, s=s, t=t-1, h=h))
h=h+100
j=j+1
}
return(result-100*j)
}
#function of Numerical integration
safe_log_compu_phi <- function(s,t,ap,timeout=0.05,old=0){
result <- old
tryCatch(
{result <- withTimeout(log_compu_phi(s=s,t=t,ap=ap),timeout = timeout)},
TimeoutException = function(ex){result <- old}
)
return(result)
}
#function of matrix compution
compute_diag_ABC_corrected <- function(A, B) {
n <- nrow(A)
diag_elements <- numeric(n)
for (i in 1:n) {
diag_elements[i] <- A[i, ] %*% B %*% t(A[i, , drop=FALSE])
}
return(diag_elements)
}
#function of BFDR
BayFDR <- function(PPI, alpha){
genenum=length(PPI)
PPI_sorted = sort(PPI,decreasing = TRUE)
k = 1
fdr = 0
while(fdr < alpha){
fdr = mean(1 - PPI_sorted[1:k])
k = k+1
if(k > length(PPI_sorted)){
k = length(PPI_sorted);
break;
}
}
if(genenum<200){
return.value = max(PPI_sorted[k],0.95)
}else{
return.value = PPI_sorted[k]
}
return.value = ifelse(is.na(return.value), 0, return.value)
return(return.value)
}
seed <- 111
result1 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.8, 0.8), inf_size = 0.5, seed = seed)
result2 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 1)
result3 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 2)
result4 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 3)
# Format input for NBIMSVG()
spelist <- list(list(result1[[1]], result1[[2]]),list(result2[[1]], result2[[2]]),list(result3[[1]], result3[[2]]),list(result4[[1]], result4[[2]]))#expression matrix and location
c_alpha <- list(result1[[3]],  result2[[3]],result3[[3]],result4[[3]])# covariates
# Run analysis (parallel with 4 cores)
result <- NBIMSVG(spelist = spelist,c_alpha = c_alpha,num_cores = 4)
# Print key outputs:
# 1. Posterior mean probabilities
print(result[[2]])
# 2. Binary classification of SV genes
print(result[[4]])
library(devtools)
library(devtools)
document()
document()
document()
rm(list = c("NBIMSVG", "sim_create", "VIZINB"))
document()
building()
build()
build()
build()
build()
build()
devtools::load_all()
devtools::install("/Users/zhoumeng/Desktop/NBIMSVG")
library(NBIMSVG)
seed <- 111
result1 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.8, 0.8), inf_size = 0.5, seed = seed)
result2 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 1)
result3 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 2)
result4 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 3)
# Format input for NBIMSVG()
spelist <- list(list(result1[[1]], result1[[2]]),list(result2[[1]], result2[[2]]),list(result3[[1]], result3[[2]]),list(result4[[1]], result4[[2]]))#expression matrix and location
c_alpha <- list(result1[[3]],  result2[[3]],result3[[3]],result4[[3]])# covariates
# Run analysis (parallel with 4 cores)
result <- NBIMSVG(spelist = spelist,c_alpha = c_alpha,num_cores = 4)
document()
document()
document()
devtools::install("/Users/zhoumeng/Desktop/NBIMSVG")
library(NBIMSVG)
seed <- 111
result1 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.8, 0.8), inf_size = 0.5, seed = seed)
result2 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 1)
result3 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 2)
result4 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 3)
# Format input for NBIMSVG()
spelist <- list(list(result1[[1]], result1[[2]]),list(result2[[1]], result2[[2]]),list(result3[[1]], result3[[2]]),list(result4[[1]], result4[[2]]))#expression matrix and location
c_alpha <- list(result1[[3]],  result2[[3]],result3[[3]],result4[[3]])# covariates
# Run analysis (parallel with 4 cores)
result <- NBIMSVG(spelist = spelist,c_alpha = c_alpha,num_cores = 4)
# Print key outputs:
# 1. Posterior mean probabilities
print(result[[2]])
# 2. Binary classification of SV genes
print(result[[4]])
devtools::install("/Volumes/Elements/speedcompute")
devtools::install("/Volumes/Elements/speedcompute/NBIMSVG-main.zip")
devtools::install("/Volumes/Elements/speedcompute")
devtools::install("/Users/zhoumeng/Desktop/NBIMSVG-main")
install.packages("/Users/zhoumeng/Desktop/NBIMSVG-main.gz",
repos = NULL,
type = "source")
devtools::install("/Users/zhoumeng/Desktop/NBIMSVG-main")
library(NBIMSVG)
seed <- 111
result1 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.8, 0.8), inf_size = 0.5, seed = seed)
result2 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 1)
result3 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 2)
result4 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 3)
# Format input for NBIMSVG()
spelist <- list(list(result1[[1]], result1[[2]]),list(result2[[1]], result2[[2]]),list(result3[[1]], result3[[2]]),list(result4[[1]], result4[[2]]))#expression matrix and location
c_alpha <- list(result1[[3]],  result2[[3]],result3[[3]],result4[[3]])# covariates
# Run analysis (parallel with 4 cores)
result <- NBIMSVG(spelist = spelist,c_alpha = c_alpha,num_cores = 4)
# Print key outputs:
# 1. Posterior mean probabilities
print(result[[2]])
# 2. Binary classification of SV genes
print(result[[4]])
devtools::check()
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
document()
document()
document()
devtools::check()
devtools::install("/Users/zhoumeng/Desktop/NBIMSVG")
library(NBIMSVG)
seed <- 111
result1 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.8, 0.8), inf_size = 0.5, seed = seed)
result2 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 1)
result3 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 2)
result4 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 3)
# Format input for NBIMSVG()
spelist <- list(list(result1[[1]], result1[[2]]),list(result2[[1]], result2[[2]]),list(result3[[1]], result3[[2]]),list(result4[[1]], result4[[2]]))#expression matrix and location
c_alpha <- list(result1[[3]],  result2[[3]],result3[[3]],result4[[3]])# covariates
# Run analysis (parallel with 4 cores)
result <- NBIMSVG(spelist = spelist,c_alpha = c_alpha,num_cores = 4)
# Print key outputs:
# 1. Posterior mean probabilities
print(result[[2]])
# 2. Binary classification of SV genes
print(result[[4]])
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
document()
devtools::check()
library(usethis)
usethis::use_github_action("check-standard")
remotes::install_github("zhoumeng123456/NBIMSVG")
library(NBIMSVG)
seed <- 111
result1 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.8, 0.8), inf_size = 0.5, seed = seed)
result2 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 1)
result3 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 2)
result4 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 3)
# Format input for NBIMSVG()
spelist <- list(list(result1[[1]], result1[[2]]),list(result2[[1]], result2[[2]]),list(result3[[1]], result3[[2]]),list(result4[[1]], result4[[2]]))#expression matrix and location
c_alpha <- list(result1[[3]],  result2[[3]],result3[[3]],result4[[3]])# covariates
# Run analysis (parallel with 4 cores)
result <- NBIMSVG(spelist = spelist,c_alpha = c_alpha,num_cores = 4)
remotes::install_github("zhoumeng123456/NBIMSVG")
remotes::install_github("zhoumeng123456/NBIMSVG",force = TRUE)
library(NBIMSVG)
seed <- 111
result1 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.8, 0.8), inf_size = 0.5, seed = seed)
result2 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 1)
result3 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 2)
result4 <- sim_create(gene_size = 20, svgene_size = 0.5, sv_mark = c(0.5, 0.5), inf_size = 0.5, seed = seed + 3)
# Format input for NBIMSVG()
spelist <- list(list(result1[[1]], result1[[2]]),list(result2[[1]], result2[[2]]),list(result3[[1]], result3[[2]]),list(result4[[1]], result4[[2]]))#expression matrix and location
c_alpha <- list(result1[[3]],  result2[[3]],result3[[3]],result4[[3]])# covariates
# Run analysis (parallel with 4 cores)
result <- NBIMSVG(spelist = spelist,c_alpha = c_alpha,num_cores = 4)
# Run analysis (parallel with 4 cores)
result <- NBIMSVG(spelist = spelist,c_alpha = c_alpha,num_cores = 4)
print(result[[2]])
# 2. Binary classification of SV genes
print(result[[4]])
R --version
r--version
R.version.string
```r
install.packages("remotes")
install.packages("remotes")
dim(result1[[1]])
dim(result1[[2]])
dim(result1[[3]])
dim(result1[[1]])#expression matrix
dim(result1[[2]])#location matrix
dim(result1[[3]])#covariates
# Print key outputs:
# 1. Posterior mean probabilities
print(result[[2]])
# 2. Binary classification of SV genes
print(result[[4]])
devtools::document()
list.files()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
